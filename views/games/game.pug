extends ../layout

block content
  script.
    const rainbow_thin = [
      'rgba(253,163,180,.2)',
      'rgba(253,195,163,.2)',
      'rgba(253,242,163,.2)',
      'rgba(204,253,163,.2)',
      'rgba(163,253,170,.2)',
      'rgba(163,253,217,.2)',
      'rgba(163,253,249,.2)',
      'rgba(163,221,253,.2)',
      'rgba(163,170,253,.2)',
      'rgba(212,163,253,.2)' ];

    const rainbow_deep = [
      'rgba(253,163,180,.8)',
      'rgba(253,195,163,.8)',
      'rgba(253,242,163,.8)',
      'rgba(204,253,163,.8)',
      'rgba(163,253,170,.8)',
      'rgba(163,253,217,.8)',
      'rgba(163,253,249,.8)',
      'rgba(163,221,253,.8)',
      'rgba(163,170,253,.8)',
      'rgba(212,163,253,.8)' ];

    const rainbow_full = [
      'rgb(253,163,180)',
      'rgb(253,195,163)',
      'rgb(253,242,163)',
      'rgb(204,253,163)',
      'rgb(163,253,170)',
      'rgb(163,253,217)',
      'rgb(163,253,249)',
      'rgb(163,221,253)',
      'rgb(163,170,253)',
      'rgb(212,163,253)' ];

    function renderRatingsChart() {
      const get_ratings = [!{game.ratings}];
      let ratings = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

      // Convert the list of ratings into an array of frequencies
      for (let i = 0; i < get_ratings.length; i++) {
        ratings[Math.round(get_ratings[i]) - 1]++;
      }

      Chart.defaults.global.defaultFontFamily = 'Verdana';
      Chart.defaults.global.defaultFontSize = 9;

      let ctx = document.getElementById('ratings-chart').getContext('2d');
      let chart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
          datasets: [{
            label: ' Ratings',
            data: ratings,
            backgroundColor: rainbow_thin,
            borderColor: rainbow_deep,
            borderWidth: 1
          }]
        },
        options: {
          legend: {
            display: false
          },
          scales: {
            yAxes: [{
              position: 'right',
              ticks: {
                callback: function(value) { if (value % 1 === 0) { return value; }}
              }
            }]
          }
        }
      });
    }

    $(document).ready(function() {
      renderRatingsChart();

      // Set the text colour of all rating values to a rainbow colour
      $('.rating').each(function(i, obj) {
        $(this).css('color', rainbow_full[Math.round($(this).text()) - 1]);
      });

      $('#user-rating').css('color', rainbow_full[Math.round($('#user-rating').val()) - 1]);
      $('#user-rating').on('input', function() {
        $('#user-rating').css('color', rainbow_full[Math.round($('#user-rating').val()) - 1]);
      });

      $('#rating-form').submit(function(e) {
        // Prevent the page from trying to change
        e.preventDefault();
        e.stopImmediatePropagation();

        // Temporarily disable the submit button
        $('#rating-submit').prop('disabled', true);

        $.ajax({
          type: 'POST',
          url: '/games/rate',
          data: $('#rating-form').serialize(),
          success: function(res) {
            if (res == 'success') {
              $('#rating-saved').show();
              $('#rating-saved').fadeOut(3000);
            }

            $('#rating-submit').prop('disabled', false);
          }
        });

        return false; // Not sure if this is actually needed
      });
    });


  table
    tr
      td.layout-small
        div.content
          if game.screenshots
            for ss in game.screenshots.split('\n')
              a.img(href=ss)
                img(src=ss)

      td.layout-large
        div.content
          table
            tr
              td.half
                div.game-info
                  h2
                    | #{game.title}
                    if game.title_romaji
                      | &nbsp;<span class='subdued'>(#{game.title_romaji})</span>

                  pre= game.description

              td.half
                table.list
                  tr
                    td <p class='subdued'>Aliases</p>
                    td <p>#{game.aliases}</p>

                  tr
                    td <p class='subdued'>Creator</p>
                    td <p>#{game.creator}</p>

                  tr
                    td <p class='subdued'>Links</p>
                    td
                      if game.links
                        each l in game.links.split('\n')
                          p <a class='special2' href="#{l.split('::')[0]}">#{l.split('::')[1]}</a>

        p.subdued.right
          | Entry created #{game.created} |
          | <a class='special' href='/games/edit/#{game.id}'>Edit this page</a>

        h2.content-title Releases
        div.content
          table.list
            tr.header
              td <p>Release Date</p>
              td <p>Version</p>
              td <p>Region</p>
              td <p>Type</p>
              td <p>Title</p>
              td

            each r in game.releases
              tr
                td
                  if r.release_date
                    p= r.release_date
                  else
                    p.subdued Unknown

                td <p>#{r.version}</p>
                td <p>#{r.region}</p>
                td <p>#{r.type}</p>

                td(width='50%')
                  p
                    | <a href='/releases/#{r.id}'>#{r.title}
                    if r.title_romaji
                      | &nbsp;<span class='subdued'>(#{r.title_romaji})</span>
                    | </a>

                td
                  p.right <a class='special' href='/releases/edit/#{r.id}'>Edit</a>

        p.right <a class='special' href='/releases/new/#{game.id}'>New release</a>

        h2.content-title Reviews & Ratings
        table
          tr
            td.layout-large2
              div.content

            td.layout-small2
              div.content
                if user
                  div.dark
                    form#rating-form
                      input(type='hidden' name='game_id' value=game.id)

                      p Your rating: &nbsp;
                        | <input id='user-rating' type='number' name='user_rating' min='1' max='10' step='.1' value=!{game.user_rating}>
                        | <span class='subdued'>/10</span> &nbsp;
                        | <input id='rating-submit' type='submit' value='Save'> &nbsp;
                        | <span id='rating-saved' style='display:none;'>Saved!</span>

                if game.ratings.length
                  table.list
                    tr
                      td.half
                        p.subdued Score/Bayesian rating
                      td
                        p.rating= game.rating_bayesian

                    tr
                      td.half
                        p.subdued Average rating
                      td
                        p.rating= game.rating_average

                    tr
                      td.half
                        p.subdued Number of ratings
                      td
                        p= game.ratings.length

                  canvas#ratings-chart
